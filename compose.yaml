# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  web:
    image: igame
    container_name: app-container
    build:
      context: .
    env_file:
      - .env
    ports:
      - 9000:80
    volumes:
      - .:/var/www/html  

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
    depends_on:
      db:
        condition: service_completed_successfully
  db:
    image: db
    restart: always
    container_name: mysql-container
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: db
      # you don't have to use root, but you can if you like gennerally use 'user'
      MYSQL_USER: root
      # You can use whatever password you like
      MYSQL_PASSWORD: ""
      #MYSQL_ALLOW_EMPTY_PASSWORD: yes
      # Password for root access
      MYSQL_ROOT_PASSWORD: root
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      - 3306:3306
    expose:
      - 3306
volumes:
  db-data:

